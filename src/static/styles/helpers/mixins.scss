@use "sass:math";
// =============================================================================
// String Replace
// =============================================================================
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;
  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );
  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );
  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }
  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

// =============================================================================
// Convertor px to REM and EM
//div {
//  width: toRem(400);
//  height: toRem(400);
//}
// =============================================================================
@function toRem($value) {
  $remValue: math.div($value, $base-font-size) + rem;
  @return $remValue;
}
@function toEm($pixels, $context: $base-font-size) {
  @return #{math.div($pixels, $context)}em;
}

// =============================================================================
// Generate breakpoints MEDIA QUARRIES and GRID
// =============================================================================
@mixin create-mq($breakpoint, $min-or-max: 'min') {
  @if($breakpoint == 0) {
    @content;
  } @else {
    @media screen and (#{$min-or-max}-width: $breakpoint *1px) {
      @content;
    }
  }
}
@mixin create-col-classes($modifier, $grid-cols, $breakpoint) {
  @include create-mq($breakpoint, 'min') {
    &__col#{$modifier}-offset-0 {
      margin-left: 0;
    }
    @for $i from 1 through $grid-cols {
      &__col#{$modifier}-#{$i} {
        flex: 1 1 auto;
        width: math.div(100, (math.div($grid-cols, $i)))* 1%;
        @each $mod, $gut in $map-breakpoints-gutter {
          padding: 0  math.div($gut, 2) * 1px;
        }
      }
      &__col#{$modifier}-offset-#{$i} {
        margin-left: math.div(100, (math.div($grid-cols, $i)))* 1%;
      }
    }
  }
}
@each $modifier , $breakpoint in $map-grid-props {
  @if($modifier == '') {
    $modifier: '-xs';
  }
  @include create-mq($breakpoint - 1, 'max') {
    .hidden#{$modifier}-down {
      display: none !important;
    }
  }
  @include create-mq($breakpoint, 'min') {
    .hidden#{$modifier}-up {
      display: none !important;
    }
  }
}